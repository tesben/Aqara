/*
    Generic Component Parent Demo
    Copyright 2019 Hubitat Inc.  All Rights Reserved
    2020-09-02 Convert to Aqara Single Gang Dual Switch by Benoit Tessier
    2020-09-02 parseDescriptionAsMap, Refresh and Configure from ST Device Driver Lumi Switch 3 by Lumi Vietnam
        https://github.com/hieutt5/SmartThingsPublic/blob/27768f18a5134a9b41d0a4fc73eac1ff43d0398c/devicetypes/Lumi%20zigbee%20switch%203%20gangs
    2019-09-07 (public repo only) maxwell-initial pub
        https://github.com/hubitat/HubitatPublic/blob/master/examples/drivers/genericComponentParentDemo.groovy
*/

metadata {
    
        definition (name: "Aqara Single Gang Dual Switch", namespace: "hubitat", author: "Benoit Tessier / Mike Maxwell") {
        
        capability "Configuration"
        capability "Refresh"

        //commands, these will create the appropriate component device if it doesn't already exist...
        command "childSwitchOn"
        command "childSwitchOff"
        command "childDimmerOn"
        command "childDimmerOff"
        
        fingerprint profileId:"0104", endpointId:"01", inClusters:"0000,0002,0003,0004,0005,0006,0009", outClusters:"000A,0019", model:"lumi.switch.b2laus01", manufacturer:"LUMI" 
        
    }
    
        preferences {
            
        input name: "logEnable", type: "bool", title: "Enable debug logging", defaultValue: true
        input name: "txtEnable", type: "bool", title: "Enable descriptionText logging", defaultValue: true
    }
}

void logsOff(){
    log.warn "debug logging disabled..."
    device.updateSetting("logEnable",[value:"false",type:"bool"])
}

void updated(){
    log.info "updated..."
    log.warn "debug logging is: ${logEnable == true}"
    log.warn "description logging is: ${txtEnable == true}"
    if (logEnable) runIn(1800,logsOff)
}

def parse(String description) {
	if (logEnable) log.debug "Parsing '${description}'"
    	if (description?.startsWith("read attr -")) {
            def descMap = parseDescriptionAsMap(description)
	        if (logEnable) log.debug "endpoint '${descMap.endpoint}'"
            switch ("${descMap.endpoint}") {
            case "01":
	            if (logEnable) log.debug "Switch"
                def cd = fetchChild("Switch")
                    switch ("${descMap.value}") {
                    case "01":
                    cd.parse([[name:"switch" , value:"on"]])
                    break
                    case "00":
                    cd.parse([[name:"switch", value:"off"]])
                    break
                    }
            break
	        case "02":
	            if (logEnable) log.debug "Dimmer"
                def cd = fetchChild("Dimmer")
                    switch ("${descMap.value}") {
                    case "01":
                    cd.parse([[name:"switch" , value:"on"]])
                    break
                    case "00":
                    cd.parse([[name:"switch", value:"off"]])
                    break
                    }            
            break
                }              
        }
}



// custom commands

def childSwitchOn(){
    def cd = fetchChild("Switch")
    cd.parse([[name:"switch", value:"on", descriptionText:"${cd.displayName} was turned on"]])
    def hubAction = new hubitat.device.HubAction("he cmd 0x${device.deviceNetworkId} 1 0x0006 1 {}", hubitat.device.Protocol.ZIGBEE)
    sendHubCommand(hubAction)
}

def childSwitchOff(){
    def cd = fetchChild("Switch")
    cd.parse([[name:"switch", value:"off", descriptionText:"${cd.displayName} was turned off"]])
    def hubAction = new hubitat.device.HubAction("he cmd 0x${device.deviceNetworkId} 1 0x0006 0 {}", hubitat.device.Protocol.ZIGBEE)
    sendHubCommand(hubAction)

}

def childDimmerOn(){
    def cd = fetchChild("Dimmer")
    cd.parse([[name:"switch", value:"on", descriptionText:"${cd.displayName} was turned on"]])
    def hubAction = new hubitat.device.HubAction("he cmd 0x${device.deviceNetworkId} 2 0x0006 1 {}", hubitat.device.Protocol.ZIGBEE)
    sendHubCommand(hubAction) 
    
}

def childDimmerOff(){
    def cd = fetchChild("Dimmer")
    cd.parse([[name:"switch", value:"off", descriptionText:"${cd.displayName} was turned off"]])
    def hubAction = new hubitat.device.HubAction("he cmd 0x${device.deviceNetworkId} 2 0x0006 0 {}", hubitat.device.Protocol.ZIGBEE)
    sendHubCommand(hubAction)
    
}

def fetchChild(String type){
    String thisId = device.id
    def cd = getChildDevice("${thisId}-${type}")
    List<Map> defaultValues = []

    if (!cd) {
        cd = addChildDevice("hubitat", "Generic Component ${type}", "${thisId}-${type}", [name: "${device.displayName} ${type}", isComponent: true])
        }
        cd.parse(defaultValues)
    
    return cd 
}

//child device methods
void componentRefresh(cd){
    if (logEnable) log.info "received refresh request from ${cd.displayName}"
}

void componentOn(cd){
    String txt = cd.displayName
    getChildDevice(cd.deviceNetworkId).parse([[name:"switch", value:"on", descriptionText:"${cd.displayName} was turned on"]])
    switch (txt.minus("${device.displayName} ")) {
            case "Switch":
            childSwitchOn()
            break
            case "Dimmer":
            childDimmerOn()
            break
        }  
}

void componentOff(cd){
    String txt = cd.displayName
    getChildDevice(cd.deviceNetworkId).parse([[name:"switch", value:"off", descriptionText:"${cd.displayName} was turned off"]])
    switch (txt.minus("${device.displayName} ")) {
            case "Switch":
            childSwitchOff()
            break
            case "Dimmer":
            childDimmerOff()
            break
        }   
}

def configure() {
    //Config binding and report for each endpoint
    	if (logEnable) log.debug "Executing 'configure'"
	[
    	"zdo bind 0x${device.deviceNetworkId} 1 1 0x0006 {${device.zigbeeId}} {}", "delay 200",
    	"zcl global send-me-a-report 0x0006 0 0x10 0 600 {01}",
		"send 0x${device.deviceNetworkId} 1 1", "delay 500",
        
    	"zdo bind 0x${device.deviceNetworkId} 2 1 0x0006 {${device.zigbeeId}} {}", "delay 200",
    	"zcl global send-me-a-report 0x0006 0 0x10 0 600 {01}",
		"send 0x${device.deviceNetworkId} 1 2", "delay 500",  	
    ]
}

def refresh() {
    //Read Attribute On Off Value of each endpoint
    if (logEnable)log.debug "Executing 'refresh'"
	[
        "st rattr 0x${device.deviceNetworkId} 1 0x0006 0", "delay 200",
        "st rattr 0x${device.deviceNetworkId} 2 0x0006 0"
	]
    
}
def parseDescriptionAsMap(description) {
	if (description?.startsWith("read attr -")) {
		(description - "read attr - ").split(",").inject([:]) { map, param ->
			def nameAndValue = param.split(":")
			map += [(nameAndValue[0].trim()): nameAndValue[1].trim()]
		}
	}
	else if (description?.startsWith("catchall: ")) {
		def seg = (description - "catchall: ").split(" ")
		def zigbeeMap = [:]
		zigbeeMap += [raw: (description - "catchall: ")]
		zigbeeMap += [profileId: seg[0]]
		zigbeeMap += [clusterId: seg[1]]
		zigbeeMap += [sourceEndpoint: seg[2]]
		zigbeeMap += [destinationEndpoint: seg[3]]
		zigbeeMap += [options: seg[4]]
		zigbeeMap += [messageType: seg[5]]
		zigbeeMap += [dni: seg[6]]
		zigbeeMap += [isClusterSpecific: Short.valueOf(seg[7], 16) != 0]
		zigbeeMap += [isManufacturerSpecific: Short.valueOf(seg[8], 16) != 0]
		zigbeeMap += [manufacturerId: seg[9]]
		zigbeeMap += [command: seg[10]]
		zigbeeMap += [direction: seg[11]]
		zigbeeMap += [data: seg.size() > 12 ? seg[12].split("").findAll { it }.collate(2).collect {
			it.join('')
		} : []]

		zigbeeMap
	}
}
